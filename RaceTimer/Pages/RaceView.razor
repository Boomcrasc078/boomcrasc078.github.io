@page "/race-view/{RaceId}"
@using Classes
@inject RaceService raceService


@if (currentRace != null)
{
	<div class="d-flex justify-content-between align-items-center gap-5 flex-wrap">
		<h1 class="top-row-title">@currentRace.Name</h1>

		<a class="btn btn-normal">
			<span>End Race</span>
			<i class="bi btn-bi bi-chevron-double-right" />
		</a>
	</div>

	

	<div class="content-box-section">
		<div class="content-box">
			<div>
				<h2>Start</h2>
				<div>
					Lorem Ipsum<br />
					Lorem Ipsum<br />
					Lorem Ipsum<br />
					Lorem Ipsum<br />
				</div>
			</div>
			<a class="btn btn-normal" href="/race-view/@RaceId/manual-start">
				<span>Start Manually</span>
				<i class="bi btn-bi bi-chevron-double-right" />
			</a>
		</div>
		<div class="content-box">
			<div>
				<h2 class="current-time">@currentTime.ToString("HH:mm:ss.ff")</h2>
			</div>
			<div class="d-flex flex-column">
				<div>
					<label for="#time-at-select">Time at</label>
					<select class="form-select" id="time-at-select" aria-label="Default select example">
						<option value="1">5k Mark</option>
						<option value="2">10k Mark</option>
						<option selected value="3">Finish Line</option>
					</select>
				</div>
				<br />
				<button class="btn btn-normal">
					<span>Time</span>
					<i class="bi btn-bi bi-stopwatch" />
				</button>
			</div>

		</div>
		<div class="content-box content-box-contains-list">
			<div>
				<h2>Racers</h2>
				<div>
					Lorem Ipsum<br />
					Lorem Ipsum<br />
					Lorem Ipsum<br />
					Lorem Ipsum<br />
				</div>
			</div>
		</div>
		<div class="content-box">
			<div>
				<h2>?????</h2>
				<div>
					Lorem Ipsum<br />
					Lorem Ipsum<br />
					Lorem Ipsum<br />
					Lorem Ipsum<br />
				</div>
			</div>
		</div>
	</div>

}


@code {
	[Parameter] public string RaceId { get; set; }
	public Race currentRace;
	public List<RaceEvent> raceEvents = new List<RaceEvent>();
	private System.Timers.Timer timer = new System.Timers.Timer();

	public DateTime currentTime = DateTime.Now;

	protected override async Task OnInitializedAsync()
	{
		currentRace = await raceService.GetRaceByIdAsync(RaceId);
		CreateUpdateTimer();
	}

	private void CreateUpdateTimer()
	{
		// Skapa en timer som tickar var 10:e millisekund (0.01 sekund).
		timer = new System.Timers.Timer(10);
		timer.Elapsed += OnTimerElapsed;
		timer.Start();
	}

	private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
	{
		currentTime = DateTime.Now;

		// Uppdaterar UI:t på huvudtråden
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		timer?.Dispose();
	}
}
