@page "/race-view/{RaceId}"

@if (currentRace != null)
{
	<div class="d-flex justify-content-between align-items-center gap-5 flex-wrap">
		<h1 class="top-row-title">@currentRace.Name</h1>
	</div>

	<div class="content-box-section">
		<div class="content-box">
			<div>
				<h2>Start</h2>
				<div>
					Lorem Ipsum<br />
					Lorem Ipsum<br />
					Lorem Ipsum<br />
					Lorem Ipsum<br />
				</div>
			</div>
			<a class="btn btn-normal" href="/race-view/@RaceId/manual-start">
				<span>Start Manually</span>
				<i class="bi btn-bi bi-play-circle" />
			</a>
		</div>
		<div class="content-box">
			<div>
				<h2 class="current-time">@currentTime.ToString("HH:mm:ss.ff")</h2>
			</div>
			<div class="d-flex flex-column">
				<div>
					<label for="#time-at-select">Time at</label>
					<select class="form-select" id="time-at-select" aria-label="Default select example">
						<option selected value="3">Finish Line</option>
					</select>
				</div>
				<br />
				<a class="btn btn-normal" href="/timer/@RaceId/finish-line">
					<span>Time</span>
					<i class="bi btn-bi bi-stopwatch" />
				</a>
			</div>
		</div>
		<div class="content-box content-box-contains-list">
			<div>
				<h2>Racers</h2>
				<div>
					<!-- Sökfält -->
					<div class="pt-2">
						<input type="search" @bind="SearchQuery" placeholder="Search racers..." class="form-control" />
					</div>

					<br />

					<!-- Sökresultat -->
					<div class="content-box-list">
						@if (filteredRacers != null && filteredRacers.Any())
						{
							<div class="all-cards pe-3">
								@foreach (var racer in filteredRacers)
								{
									<div class="card card-hover">
										<div class="card-header d-flex justify-content-between">
											<div>@racer.Bib</div>
											<div>@racer.Name @racer.Surname </div>
										</div>
									</div>
								}
							</div>

						}
						else if (!string.IsNullOrWhiteSpace(searchQuery))
						{
							<p>No racers found.</p>
						}
					</div>
				</div>
			</div>
		</div>
		<div class="content-box">
			<div>
				<h2>Results</h2>
			</div>
			<a class="btn btn-normal" href="/results/@RaceId">
				<span>Finish Race</span>
				<i class="bi btn-bi bi-check-circle"></i>
			</a>
		</div>
	</div>
}

@code {
	[Parameter] public string RaceId { get; set; }
	public Race currentRace;
	public List<RaceEvent> raceEvents = new List<RaceEvent>();
	private System.Timers.Timer timer = new System.Timers.Timer();

	public DateTime currentTime = DateTime.Now;

	private string searchQuery = string.Empty; // Söksträng från användaren
	private List<Racer> filteredRacers = new(); // Resultaten som ska visas

	protected override async Task OnInitializedAsync()
	{
		currentRace = await RaceService.GetRaceByIdAsync(RaceId, jsRuntime);

		// Visa alla racers när sidan laddas
		filteredRacers = currentRace.Startlists
			.SelectMany(sl => sl.Racers)
			.OrderBy(r =>
			{
				if (int.TryParse(r.Bib, out int parsedBib))
				{
					return parsedBib;
				}
				return int.MaxValue; // Om Bib inte är ett tal, placera dessa sist eller använd en lämplig strategi.
			})
			.ThenBy(r => r.Bib) // För att säkerställa att icke-numeriska Bib sorteras alfabetiskt.
			.ToList();

		CreateUpdateTimer();
	}

	private void CreateUpdateTimer()
	{
		// Skapa en timer som tickar var 10:e millisekund (0.01 sekund).
		timer = new System.Timers.Timer(10);
		timer.Elapsed += OnTimerElapsed;
		timer.Start();
	}

	private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
	{
		currentTime = DateTime.Now;

		// Uppdaterar UI:t på huvudtråden
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		timer?.Dispose();
	}

	// Uppdatera sökresultaten dynamiskt
	private void SearchRacers()
	{
		if (string.IsNullOrWhiteSpace(searchQuery))
		{
			filteredRacers = currentRace.Startlists
				.SelectMany(s => s.Racers)
				.OrderBy(r =>
				{
					if (int.TryParse(r.Bib, out int parsedBib))
						return parsedBib;
					return int.MaxValue;
				})
				.ThenBy(r => r.Bib)
				.ToList();
		}
		else
		{
			filteredRacers = currentRace.Startlists
				.SelectMany(s => s.Racers)
				.Where(r =>
						(r.Name?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
						(r.Surname?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
						(r.Bib?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ||
						(r.CustomFields?.Any(cf => cf.Data?.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ?? false) ?? false))
				.OrderBy(r =>
				{
					if (int.TryParse(r.Bib, out int parsedBib))
						return parsedBib;
					return int.MaxValue;
				})
				.ThenBy(r => r.Bib)
				.ToList();
		}
	}


	// Använd egenskap med bindning för att aktivera sökning
	public string SearchQuery
	{
		get => searchQuery;
		set
		{
			if (searchQuery != value)
			{
				searchQuery = value;
				Console.WriteLine($"SearchQuery: {value}");
				SearchRacers();
			}
		}
	}

}
