@page "/results/{RaceId}/{StartlistId}"
@inject IJSRuntime jsRuntime
@inject SaveLoadService saveLoadService

<Toasts @ref="toasts" />

<div class="page">
    @if (currentRace != null && currentStartlist != null)
    {
        <div class="box-body">
            <div class="top-row">
                <h1 class="top-row-title">@currentStartlist.Name</h1>
                <div class="top-row-buttons">
                    <a class="btn btn-normal" href="/results/@RaceId">
                        <span>Back</span>
                        <i class="bi btn-bi bi-chevron-double-left" />
                    </a>
                </div>
            </div>

            <div>
                <h3>Export Method</h3>
                <div>
                    <select class="form-select" @bind="exportMethod">
                        <option value="Embed">HTML Embed (Interactive)</option>
                        <option value="Text">Text (Not interactive)</option>
                        <option value="Excel">Excel File (Only Racer Data)</option>
                    </select>
                </div>
            </div>
            <div>
                <h3>Advanced</h3>
                <div>
                    <input type="checkbox" class="btn-normal-check" id="toggle-show-advanced" @bind="showAdvancedOptions">
                    <label class="btn btn-normal" for="toggle-show-advanced">
                        <span>@((showAdvancedOptions) ? "Hide" : "Show") Advanced Options</span>
                        <i class="bi btn-bi @((showAdvancedOptions) ? "bi-eye-slash" : "bi-eye")" />
                    </label>
                </div>
            </div>

            @if (showAdvancedOptions)
            {
                @switch (exportMethod)
                {
                    case "Embed":
                        <div>
                            <h3>Embed Size</h3>
                            <div style="display: flex; flex-direction: column;">
                                <div>
                                    <label for="embed-width" class="form-label">Width</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="embed-width" style="pointer-events: auto; position: static;" step="10" @bind="embed.width" />
                                        <select class="form-select" @bind="embed.widthType">
                                            <option value="px">pixels</option>
                                            <option value="%">%</option>
                                        </select>
                                    </div>
                                </div>
                                <div>
                                    <label for="embed-height" class="form-label">Height</label>
                                    <div class="input-group">
                                        <input type="number" class="form-control" id="embed-height" style="pointer-events: auto; position: static;" step="10" @bind="embed.height" />
                                        <select class="form-select" @bind="embed.heightType">
                                            <option value="px">pixels</option>
                                            <option value="%">%</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div>
                            <div>
                                <label for="font-size" class="form-label">Font Size</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="font-size" style="pointer-events: auto; position: static;" step="1" @bind="embed.fontSize" />
                                    <select class="form-select" @bind="embed.fontSize">
                                        <option value="px">pixels</option>
                                    </select>
                                </div>
                            </div>
                            <h3>Custom Styling</h3>
                            <div style="display: flex; flex-direction: column;">
                                <div>
                                    <label for="imports" class="form-label">Custom HTML Imports (Ex. Font imports)</label>
                                    <textarea id="imports" @bind="embed.imports"></textarea>
                                </div>
                                <div>
                                    <label for="custom-css" class="form-label">Custom CSS (Ex. Usage of custom fonts) OBS! Use the class .embed-styling for all custom styling to not change the whole pages styling. This may be fixed in the future.</label>
                                    <textarea id="custom-css" @bind="embed.customStyling"></textarea>
                                </div>
                            </div>
                        </div>

                        break;
                }

            }
        </div>
        <div class="box-body">
            <div class="top-row">
                <h1 class="top-row-title">Generated Results</h1>
                <div class="top-row-buttons">
                </div>
            </div>

            @switch (exportMethod)
            {
                case "Embed":
                    <div>
                        <button class="btn btn-normal" @onclick="GenerateResults">
                            <span>Generate Results</span>
                            <i class="bi btn-bi bi-stars"></i>
                        </button>
                    </div>
                    <div>
                        <h3>Embed</h3>
                        <div class="embed-styling" style="display: flex; justify-content: center; height: 300px; overflow: auto;">
                            @((MarkupString)embed.code)
                        </div>
                    </div>
                    <div>
                        <h3>Embed Code</h3>
                        <div>
                            <textarea readonly>
								@embed.code
							</textarea>
                            <button class="btn btn-normal">
                                <span>Copy to clipboard</span>
                                <i class="bi btn-bi bi-clipboard"></i>
                            </button>
                        </div>
                    </div>
                    break;

                case "Excel":
                    <div>
                        <button class="btn btn-normal" @onclick="GenerateResults">
                            <span>Generate Excel File</span>
                            <i class="bi btn-bi bi-stars"></i>
                        </button>
                    </div>
                    <div>
                        <h3>Preview</h3>
                        <div style="display: flex; justify-content: left; height: 300px; overflow: auto;">
                            <table class="table table-sm table-responsive">
                                <thead class="">
                                    <tr>
                                        @foreach (string title in excelFile.TitleRow)
                                        {
                                            <td>@title</td>
                                        }
                                    </tr>
                                </thead>
                                <tbody class="table-group-divider">
                                    @foreach (var row in excelFile.Rows)
                                    {
                                        <tr>
                                            @foreach (string cell in row)
                                            {
                                                <td>@cell</td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                    <div>
                        <h3>Download File</h3>
                        <div>
                            <button class="btn btn-normal" @onclick="() => excelFile.DownloadExcelFile(currentRace, currentStartlist)">
                                <span>Download File</span>
                                <i class="bi btn-bi bi-clipboard"></i>
                            </button>
                        </div>
                    </div>
                    break;

                case "Text":
                    <div>Text</div>
                    break;
            }
        </div>

    }
</div>


@code {
    [Parameter] public string RaceId { get; set; } = "";
    [Parameter] public string StartlistId { get; set; } = "";
    public Toasts toasts = new Toasts();
    public Race? currentRace;
    public Startlist? currentStartlist;
    private string exportMethod = "Embed";
    private Embed? embed;
    private ExcelFile? excelFile;
    bool showAdvancedOptions = false;

    protected override async Task OnInitializedAsync()
    {
        await GetStartlist();
        var resultData = await GetDataSelectionAsync(saveLoadService, "resultData", toasts);
        var racerResultData = await GetDataSelectionAsync(saveLoadService, "racerResultData", toasts);
        embed = new Embed(100, "%", 100, "%", "", "", 16, "px", currentStartlist, resultData, racerResultData, toasts);
        excelFile = new ExcelFile(jsRuntime, currentStartlist, racerResultData, toasts);
    }

    async Task GenerateResults()
    {
        var resultData = await GetDataSelectionAsync(saveLoadService, "resultData", toasts);
        var racerResultData = await GetDataSelectionAsync(saveLoadService, "racerResultData", toasts);
        embed = new Embed(embed.width, embed.widthType, embed.height, embed.heightType, embed.customStyling, embed.imports, embed.fontSize, embed.fontSizeType, currentStartlist, resultData, racerResultData, toasts);
        excelFile = new ExcelFile(jsRuntime, currentStartlist, racerResultData, toasts);
    }

    private async Task GetStartlist()
    {
        currentRace = await RaceService.GetRaceByIdAsync(RaceId, jsRuntime);
        if (currentRace != null)
        {
            currentStartlist = currentRace.Startlists?.Find(s => s.Id == StartlistId);
        }

        if (currentStartlist == null)
        {
            await toasts.CreateToast(new Toast("", "Startlist not found", "text-bg-danger"));
            return;
        }
    }

    public static async Task<IEnumerable<Results.ResultDataOption>?> GetDataSelectionAsync(SaveLoadService saveLoadService, string key, Toasts toasts)
    {
        IEnumerable<Results.ResultDataOption>? dataSelection = await saveLoadService.LoadAsync<IEnumerable<Results.ResultDataOption>>(key);

        if (dataSelection == null)
        {
            await toasts.CreateToast(new Toast("", $"No data selection found in {key}", "text-bg-danger"));
            return null;
        }

        return dataSelection;
    }

    public class GeneratedResults
    {
        public List<string> TitleRow;
        public List<List<string>> Rows;

        public GeneratedResults(Startlist? currentStartlist, IEnumerable<Results.ResultDataOption>? dataSelection, Toasts toasts)
        {

            if (dataSelection == null)
            {
                TitleRow = new List<string> { "No data selection found" };
                Rows = new List<List<string>>();
                return;
            }

            if (currentStartlist == null)
            {
                TitleRow = new List<string> { "No startlist found" };
                Rows = new List<List<string>>();
                return;
            }

            var titleRow = CreateTitleRow(dataSelection, currentStartlist);
            TitleRow = titleRow;

            Rows = CreateRows(currentStartlist, dataSelection);
        }

        public List<string> CreateTitleRow(IEnumerable<Results.ResultDataOption>? dataList, Startlist startlist)
        {
            if (dataList == null)
            {
                return new();
            }

            List<string> titleRow = new List<string>();

            titleRow.Add("Place");
            titleRow.Add("Name");
            titleRow.Add("Surname");

            foreach (var data in dataList)
            {
                if (!data.Value)
                    continue;

                int maxLaps = CalculateMaxLaps(startlist);

                if (data.Id == "laptimes")
                {
                    for (int i = 0; i < maxLaps; i++)
                    {
                        titleRow.Add($"Lap {i + 1}");
                    }
                    continue;
                }

                titleRow.Add(data.Name);
            }

            return titleRow;
        }

        public List<string> CreateRow(Racer racer, Startlist startlist, IEnumerable<Results.ResultDataOption>? dataList, int place)
        {
            if (dataList == null)
            {
                return new();
            }

            List<string> row = new List<string>();

            row.Add(place.ToString());
            row.Add(racer.GetResultData("name") + "");
            row.Add(racer.GetResultData("surname") + "");

            foreach (var data in dataList)
            {
                if (!data.Value)
                    continue;

                if (data.Id == "laptimes")
                {
                    int maxLaps = CalculateMaxLaps(startlist);

                    var getLaptimes = racer.GetResultData("laptimes");
                    if (getLaptimes == null)
                    {
                        for (int i = 0; i < maxLaps; i++)
                        {
                            row.Add("");
                        }
                        continue;
                    }

                    CreateLaptimeRows(startlist, maxLaps, (List<string>)getLaptimes).ForEach(x => row.Add(x));

                    continue;
                }

                if (data.Id == "pace" || data.Id == "speed")
                {
                    row.Add(racer.GetResultData(data.Id, startlist.DistanceMeters) + "");
                    continue;
                }

                row.Add(racer.GetResultData(data.Id) + "");
            }

            return row;
        }

        List<string> CreateLaptimeRows(Startlist startlist, int maxLaps, List<string> lapTimes)
        {
            List<string> LaptimeRows = new();

            for (int i = 0; i < maxLaps; i++)
            {
                if (i >= lapTimes.Count)
                {
                    LaptimeRows.Add("");
                }
                else
                {
                    LaptimeRows.Add(lapTimes[i]);
                }
            }

            return LaptimeRows;
        }

        int CalculateMaxLaps(Startlist startlist)
        {
            int maxLaps = 0;
            foreach (var racer in startlist.Racers)
            {
                if (racer.Events.Count > maxLaps)
                {
                    maxLaps = racer.Events.Count;
                }
            }
            return maxLaps;
        }

        public List<List<string>> CreateRows(Startlist startlist, IEnumerable<Results.ResultDataOption>? dataList)
        {
            if (dataList == null)
            {
                return new();
            }
            List<List<string>> rows = new List<List<string>>();
            int place = 0;
            foreach (var racer in startlist.Racers.OrderByDescending(racer => racer.Events.Count).ThenByDescending(racer => racer.StartDateTime - (racer.Events.Count > 0 ? racer.Events.Last().DateTime : DateTime.MinValue)))
            {
                place++;
                var row = CreateRow(racer, startlist, dataList, place);
                rows.Add(row);
            }
            return rows;
        }
    }


    public class Embed
    {
        public string code = "";
        public int width;
        public string widthType;
        public int height;
        public string heightType;
        public string customStyling;
        public string imports;
        public float fontSize;
        public string fontSizeType;

        public Embed(int width, string widthType, int height, string heightType, string customStyling, string imports, float fontSize, string fontSizeType, Startlist? currentStartlist, IEnumerable<Results.ResultDataOption>? dataSelection, IEnumerable<Results.ResultDataOption>? collapsibleDataSelection, Toasts toasts)
        {
            this.width = width;
            this.widthType = widthType;
            this.height = height;
            this.heightType = heightType;
            this.customStyling = customStyling;
            this.imports = imports;
            this.fontSize = fontSize;
            this.fontSizeType = fontSizeType;
            var generatedResults = new GeneratedResults(currentStartlist, dataSelection, toasts);
            var collapsibleGeneratedResults = new GeneratedResults(currentStartlist, collapsibleDataSelection, toasts);
            this.code = GenerateEmbedCode(generatedResults, collapsibleGeneratedResults);
        }

        string GenerateEmbedCode(GeneratedResults generatedResults, GeneratedResults generatedCollapsibleResults)
        {
            string tableHeadRows = "";

            foreach (var title in generatedResults.TitleRow)
            {
                tableHeadRows += $"<th class=\"embed\">{title}</td>";
            }

            tableHeadRows += $"<th class=\"embed\"></td>";

            string tableHead = $"<tr class=\"embed\">{tableHeadRows}</tr>";

            string tableRows = "";

            int rowIndex = 0;
            foreach (var row in generatedResults.Rows)
            {
                string tableRow = "";

                foreach (var cell in row)
                {
                    tableRow += $"<td class=\"embed\">{cell}</td>";
                }

                tableRow += $"<td class=\"embed\"><button class=\"embed collapsible-button\" id=\"coll-button{rowIndex}\" onclick=\"toggleCollapsible(this.id)\">Show More</button></td>";

                string collapsibleContent = "";
                int contentIndex = 0;
                foreach (var content in generatedCollapsibleResults.Rows[rowIndex])
                {
                    string divStyle = "";
                    string title = generatedCollapsibleResults.TitleRow[contentIndex];
                    // switch (title)
                    // {
                    //     case "Name":
                    //         divStyle = "grid-column-start: 1; grid-column-end: 3;";
                    //         break;

                    //     default:
                            
                    //         break;
                    // }

                    collapsibleContent += $"<div class=\"embed\" style=\"{divStyle}\">{title}: {content}</div>";
                    contentIndex++;
                }

                tableRows += $"<tr class=\"embed\">{tableRow}</tr>";
                tableRows += $"<tr class=\"embed collapsible-content\" id=\"coll-content{rowIndex}\"><td class=\"embed\" colspan=\"{row.Count + 1}\"><div class=\"embed collapsible-content-grid\">{collapsibleContent}</div></td></tr>";
                rowIndex++;
            }

            string tableBody = $"<tr>{tableRows}</tr>";

            string style =
            "<style>" +
            ".embed{font-family: Helvetica Neue, Helvetica, Arial, sans-serif; color: white;" +
            $"font-size: {fontSize}{fontSizeType}" +
            "}" +
            "table.embed" +
            "{" +
            $"width: {width}{widthType}; height: {height}{heightType};" +
            "color: white; text-align: center;  overflow: auto;" +
            "}" +
            "table.embed, th.embed, td.embed {border-bottom: 1px solid white; border-collapse: collapse;}" +
            ".embed.collapsible-button{background: none; border: none;}" +
            ".embed.collapsible-content{display: none; overflow: hidden;}" +
            ".embed.collapsible-content-grid{display: grid; text-align: left; padding: 24px;}" +
            "@media(max-width: 600px){.embed{font-size: calc(" + fontSize + fontSizeType + "/2)}}" +
            customStyling +
            "</style>";

            string code =
            "<link href=\"https://fonts.cdnfonts.com/css/helvetica-neue-5\" rel=\"stylesheet\">" +
            imports +
            "<table class=\"embed\">" +
            $"{tableHead}" +
            $"{tableBody}" +
            "</table>" +
            "<script>Array.from(document.getElementsByClassName('collapsible-content')).forEach(element => {element.style.display = 'none';});function toggleCollapsible(buttonId) {const button = document.getElementById(buttonId);button.classList.toggle('active');button.innerHTML = button.classList.contains('active') ? 'Show Less' : 'Show More';const contentId = buttonId.replace('button', 'content');const content = document.getElementById(contentId);content.style.display = button.classList.contains('active') ? 'table-row' : 'none';}</script>" +
            $"{style}";
            return code;
        }
    }

    class ExcelFile
    {
        public List<string> TitleRow;
        public List<List<string>> Rows;
        private IJSRuntime jsRuntime;

        public ExcelFile(IJSRuntime jsRuntime, Startlist? currentStartlist, IEnumerable<Results.ResultDataOption>? dataSelection, Toasts toasts)
        {
            this.jsRuntime = jsRuntime;
            var generatedResults = new GeneratedResults(currentStartlist, dataSelection, toasts);
            TitleRow = generatedResults.TitleRow;
            Rows = generatedResults.Rows;
        }

        public async Task DownloadExcelFile(Race race, Startlist startlist)
        {
            List<List<string>> Worksheet = new();

            Worksheet.Add(TitleRow);
            Rows.ForEach(row => Worksheet.Add(row));

            await ExportAndDownloadExcelFile($"{race.Name} - {startlist.Name} Results", Worksheet);
        }

        public async Task ExportAndDownloadExcelFile(string fileName, List<List<string>> Worksheet)
        {
            using var memoryStream = ExcelHandler.ExportCustomExcelFile(Worksheet);
            fileName = $"{fileName}.xlsx";
            var fileBytes = memoryStream.ToArray();
            await DownloadFile(fileBytes, fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
        }

        public async Task DownloadFile(byte[] fileBytes, string fileName, string contentType)
        {
            var base64Data = Convert.ToBase64String(fileBytes);
            await jsRuntime.InvokeVoidAsync("downloadFileFromBlazor", fileName, contentType, base64Data);
        }

    }

}
