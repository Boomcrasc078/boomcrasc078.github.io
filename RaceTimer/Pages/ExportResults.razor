@page "/results/{RaceId}/{StartlistId}"
@inject IJSRuntime jsRuntime
@inject RaceService raceService
@inject SaveLoadService saveLoadService

<Toasts @ref="toasts" />

<div class="page">
	@if (currentRace != null && currentStartlist != null)
	{
		<div class="box-body">
			<div class="top-row">
				<h1 class="top-row-title">@currentStartlist.Name</h1>
				<div class="top-row-buttons">
					<a class="btn btn-normal" href="/results/@RaceId">
						<span>Back</span>
						<i class="bi btn-bi bi-chevron-double-left" />
					</a>
				</div>
			</div>

			<div>
				<h3>Export Method</h3>
				<div>
					<select class="form-select" @bind="exportMethod">
						<option value="Embed">HTML Embed (Interactive)</option>
						<option value="Text">Text (Not interactive)</option>
					</select>
				</div>
			</div>
			@switch (exportMethod)
			{
				case "Embed":
					<div>
						<h3>Embed Size</h3>
						<div style="display: flex; flex-direction: column;">
							<div>
								<label for="embed-width" class="form-label">Width</label>
								<div class="input-group">
									<input type="number" class="form-control" id="embed-width" style="pointer-events: auto; position: static;" step="10" @bind="embed.width" />
									<select class="form-select" @bind="embed.widthType">
										<option value="px">pixels</option>
										<option value="%">%</option>
									</select>
								</div>
							</div>
							<div>
								<label for="embed-height" class="form-label">Height</label>
								<div class="input-group">
									<input type="number" class="form-control" id="embed-height" style="pointer-events: auto; position: static;" step="10" @bind="embed.height" />
									<select class="form-select" @bind="embed.heightType">
										<option value="px">pixels</option>
										<option value="%">%</option>
									</select>
								</div>
							</div>
						</div>
					</div>
					break;
			}

		</div>

		<div class="box-body">
			<div class="top-row">
				<h1 class="top-row-title">Generated Results</h1>
				<div class="top-row-buttons">
				</div>
			</div>

			@switch (exportMethod)
			{
				case "Embed":
					<div>
						<button class="btn btn-normal" @onclick="()=>embed.GenerateEmbedCode(currentStartlist, saveLoadService, toasts)">
							<span>Generate Results</span>
							<i class="bi btn-bi bi-stars"></i>
						</button>
					</div>
					<div>
						<h3>Embed</h3>
						<div style="display: flex; justify-content: center; height: 300px; overflow: auto;">
							@((MarkupString)embed.code)
						</div>
					</div>
					<div>
						<h3>Embed Code</h3>
						<div>
							<textarea readonly>
								@embed.code
																			</textarea>
							<button class="btn btn-normal">
								<span>Copy to clipboard</span>
								<i class="bi btn-bi bi-clipboard"></i>
							</button>
						</div>
					</div>
					break;

				case "HTML":
					<div>HTML</div>
					break;

				case "Text":
					<div>Text</div>
					break;
			}
		</div>
	}
</div>


@code {
	[Parameter] public string RaceId { get; set; } = "";
	[Parameter] public string StartlistId { get; set; } = "";
	public Toasts toasts = new Toasts();
	public Race? currentRace;
	public Startlist? currentStartlist;
	private string exportMethod = "Embed";
	private Embed embed = new Embed(100, "%", 100, "%");

	protected override async Task OnInitializedAsync()
	{
		await GetStartlist();

		await embed.GenerateEmbedCode(currentStartlist, saveLoadService, toasts);
	}

	private async Task GetStartlist()
	{
		currentRace = await raceService.GetRaceByIdAsync(RaceId);
		if (currentRace != null)
		{
			currentStartlist = currentRace.Startlists?.Find(s => s.Id == StartlistId);
		}

		if (currentStartlist == null)
		{
			await toasts.CreateToast(new Toast("", "Startlist not found", "text-bg-danger"));
			return;
		}
	}

	public class Embed
	{
		public float width { get; set; }
		public string widthType { get; set; }
		public float height { get; set; }
		public string heightType { get; set; }

		public string @style { get; set; }

		public string code { get; set; }

		public Embed(float width, string widthType, float height, string heightType)
		{
			this.width = width;
			this.height = height;
			this.style = "border-radius: 12px;";
			this.code = "";
			this.widthType = widthType;
			this.heightType = heightType;
		}

		public async Task GenerateEmbedCode(Startlist? currentStartlist, SaveLoadService saveLoadService, Toasts toasts)
		{
			if (currentStartlist == null)
			{
				await toasts.CreateToast(new Toast("", "No startlist found", "text-bg-danger"));
				return;
			}

			var dataSelection = await GetDataSelectionAsync(saveLoadService, "resultData", toasts);

			if (dataSelection == null)
			{
				return;
			}

			code = BuildEmbedString(currentStartlist, dataSelection);
		}

		public async Task<IEnumerable<Results.ResultDataOption>?> GetDataSelectionAsync(SaveLoadService saveLoadService, string key, Toasts toasts)
		{
			IEnumerable<Results.ResultDataOption>? dataSelection = await saveLoadService.LoadAsync<IEnumerable<Results.ResultDataOption>>(key);

			if (dataSelection == null)
			{
				await toasts.CreateToast(new Toast("", $"No data selection found in {key}", "text-bg-danger"));
				return null;
			}

			return dataSelection;
		}

		string CreateEmbedTitleBox(List<Results.ResultDataOption> dataList)
		{
			string titleBox = "<div class=\"result-box\">";

			titleBox += $"<span>Name</span>";

			foreach (var data in dataList)
			{
				if (!data.Value)
					continue;

				titleBox += $"<span>{data.Name}</span>";
			}

			titleBox +=
			"</div>";

			return titleBox;
		}

		string CreateEmbedRacerBox(Racer racer, List<Results.ResultDataOption> dataList)
		{
			string box = "<div class=\"result-box\">";
			box += $"<span>{racer.GetResultData("Name")} {racer.GetResultData("Surname")}</span>";
			foreach (var data in dataList)
			{
				if (!data.Value)
					continue;

				box += $"<span>{racer.GetResultData(data.Name)}</span>";
			}
			box += "</div>";
			return box;
		}

		public string BuildEmbedString(Startlist startlist, IEnumerable<Results.ResultDataOption> dataSelection)
		{
			var dataList = dataSelection.ToList();

			string styling =
			"<style>" +
				".result-embed{" +
					"display: flex; " +
					"flex-direction: column; " +
					"background-color: #21212133; " +
					"backdrop-filter: blur(20px); " +
					"padding: 12px; " +
					"border: solid 1px white; " +
					"border-radius: 12px; " +
					$"width: {width + widthType}; " +
					$"height: {height + heightType}; " +
					$"{style} " +
					"overflow: auto; " +
					"}" +

					".result-box{" +
					"height: 50px; " +
					"background-color: black; " +
					"padding: 12px; " +
					"border-radius: 4px; " +
					"display: flex; " +
					"justify-content: space-between; " +
					"border-bottom: solid 1px white; " +
					"}" +
			"</style>";

			string resultBoxes = "";
			resultBoxes += CreateEmbedTitleBox(dataList);

			foreach (var racer in startlist.Racers)
			{
				resultBoxes += CreateEmbedRacerBox(racer, dataList);
			}

			string newSourceDocument =
				"<div class=\"result-embed\">" +
				resultBoxes +
				"</div>" +
				styling;


			return newSourceDocument;
		}
	}
}
