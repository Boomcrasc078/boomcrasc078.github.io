@page "/timer/{RaceId}/finish-line"
@inject IJSRuntime JS
@using RaceTimer.Classes
@using RaceTimer.Components

<Toasts @ref="toasts" />
@if (activeRacer != null)
{
	<div class="modal fade" id="newRacerModal" tabindex="-1" aria-labelledby="newRacerModal" aria-hidden="true">
		<div class="modal-dialog modal-dialog-centered">
			<div class="modal-content">
				<div class="modal-header">
					<h1 class="modal-title fs-5">New Racer</h1>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="()=>RemoveActiveRacer()"></button>
				</div>
				<div class="modal-body">
					<div>
						<div class="form-floating mb-3">
							<input type="text" class="form-control" id="floatingInput" placeholder="Name" @bind="activeRacer.Name">
							<label for="floatingInput">Name</label>
						</div>
						<div class="form-floating mb-3">
							<input type="text" class="form-control" id="floatingInput2" placeholder="Surname" @bind="activeRacer.Surname">
							<label for="floatingInput2">Surname</label>
						</div>
						<div class="form-floating">
							<input type="number" class="form-control" id="floatingInputGroup2" placeholder="Bib Number" @bind="activeRacer.Bib">
							<label for="floatingInputGroup2">Bib Number</label>
						</div>
						<label for="#StartlistSelect">Startlist</label>
						<select class="form-select" id="StartlistSelect" aria-label="Startlist Select" @bind="modalSelectedStartlistId">
							@foreach (var startlist in currentRace.Startlists)
							{
								<option value="@startlist.Id">@startlist.Name</option>
							}
						</select>
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-normal" data-bs-dismiss="modal" @onclick="()=>AddNewRacer(activeRacer, currentRace.Startlists.Find(startlist => startlist.Id == modalSelectedStartlistId))">
						<span>Save</span>
						<i class="bi btn-bi bi-floppy"></i>
					</button>
					<button type="button" class="btn btn-normal" data-bs-dismiss="modal" @onclick="()=>RemoveActiveRacer()">
						<span>Cancel</span>
						<i class="bi btn-bi bi-x-lg"></i>
					</button>
				</div>
			</div>
		</div>
	</div>
}

<script>
	window.interop = {
	toggleModal: function (modalId) {
	const modalElement = document.getElementById(modalId);
	if (modalElement) {
	const modal = new bootstrap.Modal(modalElement);
	modal.toggle();
	} else {
	console.error(`Modal with ID '${modalId}' not found.`);
	}
	}
	};

</script>

<div class="layout" tabindex="0" @ref="KeyboardRef" @onkeydown="HandleKeyboardInput">
	<div id="timeListContainer" class="table-container">
		<table class="table table-sm table-responsive">
			<thead>
				<tr>
					<th>Bib</th>
					<th>Name</th>
					<th>Time</th>
					<th>Progress</th>
				</tr>
			</thead>
			<tbody class="table-group-divider">
				@foreach (Racer racer in timeList)
				{
					<tr class="@((activeRacer==racer)?"active":"")" @onclick="@(()=>activeRacer = racer)">
						<th>@racer.Bib</th>
						<td>
							@if (racer != null && racer.Id != "")
							{
								<span>@racer.Name</span> <span>@racer.Surname</span>
							}
							else
							{
								<span>(ENTER BIB)</span>
							}

						</td>
						<td>
							@if (racer.Events.Count > 0 && racer.StartDateTime.HasValue)
							{
								@((racer.Events.Last().DateTime - racer.StartDateTime.Value).ToString("hh\\:mm\\:ss\\.ff"))
							}
							@if (racer.StartDateTime.HasValue)
							{
								<span> (@((currentTime - racer.StartDateTime.Value).ToString("hh\\:mm\\:ss\\.ff")))</span>
							}
						</td>
						@if(racer.Id != "")
						{
						if(currentRace.Startlists.First(s => s.Racers.Contains(racer)).LapCount <= racer.Events.Count)
						{
							<td>Finished</td>
						}
						else
						{
							if(currentRace.Startlists.First(s => s.Racers.Contains(racer)).RaceType.Id != RaceType.SingleCourse.Id)
							{
							<td>@racer.Events.Count @((racer.Events.Count == 1)? "lap" : "laps")</td>

							}
							else
							{
									<td>Not Finished</td>
								}
							}
						}
						else
						{
							<td></td>
						}
					</tr>
				}
			</tbody>
		</table>
	</div>
	@if (showNumpad)
	{
		<button class="btn time-container" @onclick="()=>TimestampButtonClicked(DateTime.Now)">
			<h5 class="text-center">@currentTime.ToString("HH:mm:ss.ff")</h5>
			@if (activeRacer != null && activeRacer.Id != "")
			{
				<h6 class="text-center">Press to add lap to @activeRacer.Name</h6>
			}
			else
			{
				<h6 class="text-center">Press to set timestamp</h6>
			}

		</button>
		<Numpad NumberClicked="NumberClicked" BackspaceClicked="BackspaceClicked" EnterClicked="EnterClicked"></Numpad>
	}
	<div class="top-row">
		<div class="top-row-buttons">
			<a class="btn btn-normal" href="/race-view/@RaceId">
				<span>Back</span>
				<i class="bi btn-bi bi-chevron-double-left" />
			</a>
			<button class="btn btn-normal" @onclick="() => showNumpad=!showNumpad">
				@if (showNumpad)
				{
					<span>Hide</span>
					<i class="bi btn-bi bi-arrow-bar-down" />
				}
				else
				{
					<span>Show</span>
					<i class="bi btn-bi bi-arrow-bar-up" />
				}
			</button>
		</div>
	</div>
</div>

@code {
	[Parameter] public string RaceId { get; set; }
	private Race currentRace = new Race();
	private System.Timers.Timer timer = new System.Timers.Timer();
	private List<Racer> timeList = new List<Racer>();
	private Racer? activeRacer;
	private List<Racer> nextEdit = new List<Racer>();
	public Toasts toasts { get; set; } = new Toasts();
	private ElementReference KeyboardRef;
	public DateTime currentTime;
	string pressedKey = "";
	private bool showNumpad = true;
	private string modalSelectedStartlistId = "";

	protected override async Task OnInitializedAsync()
	{
		var getRace = await RaceService.GetRaceByIdAsync(RaceId, jsRuntime);
		if (getRace == null)
		{
			toasts?.CreateToast(new Toast("", $"Could not find a race with id: {RaceId}.", "text-bg-danger"));
			return;
		}
		currentRace = getRace;
		CreateUpdateTimer();
		LoadRacersIntoTimeList();

		modalSelectedStartlistId = currentRace.Startlists[0].Id;

	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await KeyboardRef.FocusAsync();
		}
	}

	private async Task HandleKeyboardInput(KeyboardEventArgs e)
	{
		pressedKey = e.Key;

		switch (pressedKey)
		{
			case "1":
				NumberClicked(1);
				break;
			case "2":
				NumberClicked(2);
				break;
			case "3":
				NumberClicked(3);
				break;
			case "4":
				NumberClicked(4);
				break;
			case "5":
				NumberClicked(5);
				break;
			case "6":
				NumberClicked(6);
				break;
			case "7":
				NumberClicked(7);
				break;
			case "8":
				NumberClicked(8);
				break;
			case "9":
				NumberClicked(9);
				break;
			case "0":
				NumberClicked(0);
				break;
			case "Backspace":
				BackspaceClicked();
				break;
			case "-":
				BackspaceClicked();
				break;
			case ".":
				BackspaceClicked();
				break;
			case "Enter":
				await EnterClicked();
				break;
			case " ":
				await TimestampButtonClicked(DateTime.Now);
				break;
			case "+":
				await TimestampButtonClicked(DateTime.Now);
				break;
		}
	}

	private void LoadRacersIntoTimeList()
	{
		foreach (Racer racer in currentRace.Startlists.SelectMany(s => s.Racers))
		{
			AddRacerToTimeList(racer);
		}
	}

	private void AddRacerToTimeList(Racer racer)
	{
		if (timeList.Contains(racer))
			return;

		if (!racer.StartDateTime.HasValue)
			return;

		if (racer.StartDateTime > currentTime)
			return;

		timeList.Add(racer);

	}

	private void NumberClicked(int number)
	{
		if (activeRacer == null)
		{
			return;
		}
		if (activeRacer.Id != "")
		{
			return;
		}
		activeRacer.Bib += number.ToString();
	}

	private void BackspaceClicked()
	{
		if (activeRacer == null)
			return;
		if (activeRacer.Id != "")
			return;
		if (activeRacer.Bib.Length == 0)
		{
			RemoveActiveRacer();
			return;
		}
		activeRacer.Bib = activeRacer.Bib.Substring(0, activeRacer.Bib.Length - 1);
	}

	private async Task EnterClicked()
	{
		if (activeRacer == null)
		{
			return;
		}
		await AttemptAssignRacer(activeRacer);
	}

	private void CreateUpdateTimer()
	{
		// Skapa en timer som tickar var 10:e millisekund (0.01 sekund).
		timer = new System.Timers.Timer(10);
		timer.Elapsed += OnTimerElapsed;
		timer.Start();
	}

	private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
	{
		currentTime = DateTime.Now;
		LoadRacersIntoTimeList();

		// Uppdaterar UI:t på huvudtråden
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		timer?.Dispose();
	}

	private async Task TimestampButtonClicked(DateTime dateTime)
	{
		if (activeRacer != null && activeRacer.Id != "")
		{
			await AddLapTimeToRacer(dateTime);
			return;
		}

		await AddTimestampToLapList(dateTime);
	}

	private async Task AddLapTimeToRacer(DateTime dateTime)
	{
		if (activeRacer == null)
		{
			return;
		}
		activeRacer.Events.Add(new RacerEvent("Lap", dateTime, activeRacer.Events.Select(e => e.Id)));
		Console.WriteLine($"Added {dateTime} to activeRacer: {activeRacer.Bib}");
		timeList.Remove(activeRacer);
		timeList.Add(activeRacer);
		toasts?.CreateToast(new Toast("", $"{activeRacer.Name} {activeRacer.Surname} finished lap {activeRacer.Events.Count}!", ""));
		activeRacer = null;
		await RaceService.UpdateRaceAsync(currentRace, jsRuntime);
	}

	private async Task AddTimestampToLapList(DateTime dateTime)
	{
		Console.WriteLine($"Added {dateTime} to lapTimeList");
		var racer = new Racer();
		racer.Events.Add(new RacerEvent("Lap", dateTime, racer.Events.Select(e => e.Id)));
		timeList.Add(racer);
		nextEdit.Add(racer);
		activeRacer = nextEdit[0];
		await ScrollToBottomAsync();
	}

	private async Task AttemptAssignRacer(Racer getRacer)
	{
		if (activeRacer == null || activeRacer.Id != "")
		{
			activeRacer = null;
			return;
		}

		Racer? foundRacer = FindRacerByBib(getRacer);

		if (foundRacer == null)
		{
			await AttemptAddNewRacer(getRacer);
			return;
		}

		await AssignRacer(foundRacer, getRacer);

		toasts?.CreateToast(new Toast("", $"{foundRacer.Name} {foundRacer.Surname} finished lap {foundRacer.Events.Count}!", ""));

		if (nextEdit.Contains(getRacer))
		{
			nextEdit.Remove(getRacer);
		}

		activeRacer = null;

		if (nextEdit.Count > 0)
		{
			activeRacer = nextEdit[0];
		}
	}

	private Racer? FindRacerByBib(Racer getRacer)
	{
		Console.WriteLine($"Trying to find {getRacer.Bib}");
		Racer? foundRacer = null;
		foreach (Startlist startlist in currentRace.Startlists)
		{
			foundRacer = startlist.Racers.Find(thisracer => thisracer.Bib == getRacer.Bib);
			if (foundRacer != null)
				break;
		}

		return foundRacer;
	}

	private void ClearActiveRacer(Racer getRacer)
	{
		Console.WriteLine($"Didn't find {getRacer.Bib}");
		toasts?.CreateToast(new Toast("", $"There is no racer with Bib: {getRacer.Bib}", "text-bg-danger"));
		activeRacer = null;
		getRacer.Bib = "";
	}

	private void RemoveActiveRacer()
	{
		if (activeRacer == null)
		{
			return;
		}

		timeList.Remove(activeRacer);
		if (nextEdit.Contains(activeRacer))
		{
			nextEdit.Remove(activeRacer);
		}
		activeRacer = null;
		if (nextEdit.Count > 0)
		{
			activeRacer = nextEdit[0];
		}
	}

	private async Task AssignRacer(Racer racer, Racer tempRacer)
	{
		Console.WriteLine($"Found {racer.Bib} named {racer.Name} {racer.Surname}");
		racer.Events.AddRange(tempRacer.Events);
		int index = timeList.IndexOf(tempRacer);
		timeList.Remove(racer);
		timeList.Insert(index, racer);
		timeList.Remove(tempRacer);
		await RaceService.UpdateRaceAsync(currentRace, jsRuntime);
	}

	async Task AttemptAddNewRacer(Racer racer)
	{
		await jsRuntime.InvokeVoidAsync("interop.toggleModal", "newRacerModal");
	}

	async Task<Racer?> AddNewRacer(Racer? tempRacer, Startlist? startlist)
	{
		if (tempRacer == null)
		{
			return null;
		}

		if (startlist == null)
		{
			return null;
		}

		Racer newRacer = new Racer();

		newRacer.Bib = tempRacer.Bib;
		newRacer.Id = IdGenerator.GenerateUniqueId(startlist.Racers.Select(racer => racer.Id));
		newRacer.StartDateTime = startlist.FirstStartDateTime();
		newRacer.Name = tempRacer.Name;
		newRacer.Surname = tempRacer.Surname;
		newRacer.CustomFields = tempRacer.CustomFields;

		startlist.Racers.Add(newRacer);

		await RaceService.UpdateRaceAsync(currentRace, jsRuntime);

		await AttemptAssignRacer(activeRacer);

		await InvokeAsync(StateHasChanged);

		return tempRacer;
	}

	private async Task ScrollToBottomAsync()
	{
		await JS.InvokeVoidAsync("scrollToBottom", "timeListContainer");
	}
}