@page "/timer/{RaceId}/finish-line"
@inject RaceService raceService
@inject IJSRuntime JS
@using RaceTimer.Classes
@using RaceTimer.Components

<Toasts @ref="toasts" />

<div class="layout">
	<div id="timeListContainer" class="table-container">
		<table class="table table-sm table-responsive">
			<thead>
				<tr>
					<th>Bib</th>
					<th>Name</th>
					<th>Time</th>
					<th>Lap</th>
				</tr>
			</thead>
			<tbody class="table-group-divider">
				@foreach (Racer racer in timeList)
				{
					<tr class="@((activeRacer==racer)?"active":"")" @onclick="@(()=>activeRacer = racer)">
						<th>@racer.Bib</th>
						<td>
							@if(racer != null && racer.Id != "")
							{
								<span>@racer.Name</span> <span>@racer.Surname</span>
							}
							else
							{
								<span>(ENTER BIB)</span>
							}

						</td>
						<td>
							@if (racer.LapDateTime.Count > 0 && racer.StartDateTime.HasValue)
							{
								@((racer.LapDateTime.Last() - racer.StartDateTime.Value).ToString("hh\\:mm\\:ss\\.ff"))
							}
							@if (racer.StartDateTime.HasValue)
							{
								<span> (@((currentTime - racer.StartDateTime.Value).ToString("hh\\:mm\\:ss\\.ff")))</span>
							}
						</td>
						<td>@racer.LapDateTime.Count</td>
					</tr>
				}
			</tbody>
		</table>
	</div>

	<button class="btn time-container" @onclick="()=>SetTimeClick(DateTime.Now)">
		<h5 class="text-center">@currentTime.ToString("HH:mm:ss.ff")</h5>
		@if (activeRacer != null && activeRacer.Id != "")
		{
			<h6 class="text-center">Press to add lap to @activeRacer.Name</h6>
		}
		else
		{
			<h6 class="text-center">Press to set timestamp</h6>
		}

	</button>
	<Numpad NumberClicked="NumberClicked" BackspaceClicked="BackspaceClicked" EnterClicked="EnterClicked"></Numpad>
	<div class="top-row">
		<div class="top-row-buttons">
			<a class="btn btn-normal" href="/race-view/@RaceId">
				<span>Back to RaceView</span>
				<i class="bi btn-bi bi-chevron-double-left" />
			</a>
		</div>
	</div>
</div>

@code {
	[Parameter] public string RaceId { get; set; }
	private Race currentRace = new Race();
	private System.Timers.Timer timer = new System.Timers.Timer();
	private List<Racer> timeList = new List<Racer>();
	private Racer? activeRacer;
	private List<Racer> nextEdit = new List<Racer>();
	public Toasts toasts { get; set; } = new Toasts();

	public DateTime currentTime;

	protected override async Task OnInitializedAsync()
	{
		currentRace = await raceService.GetRaceByIdAsync(RaceId);
		CreateUpdateTimer();
		AddAllRacersToTimeList();
	}

	private void AddAllRacersToTimeList()
	{
		foreach (Racer racer in currentRace.Startlists.SelectMany(s => s.Racers))
		{
			AddRacerToTimeList(racer);
		}
	}

	private void AddRacerToTimeList(Racer racer)
	{
		if (timeList.Contains(racer))
			return;

		if (!racer.StartDateTime.HasValue)
			return;

		if (racer.StartDateTime > currentTime)
			return;

		timeList.Add(racer);

	}

	private void NumberClicked(int number)
	{
		if (activeRacer == null)
		{
			return;
		}
		if (activeRacer.Id != "")
		{
			return;
		}
		activeRacer.Bib += number.ToString();
	}

	private void BackspaceClicked()
	{
		if (activeRacer == null)
			return;
		if (activeRacer.Id != "")
			return;
		if (activeRacer.Bib.Length == 0)
		{
			timeList.Remove(activeRacer);
			activeRacer = null;
			if(nextEdit.Count > 0)
			{
				activeRacer = nextEdit[0];
			}
			return;
		}
		activeRacer.Bib = activeRacer.Bib.Substring(0, activeRacer.Bib.Length - 1);
	}

	private async Task EnterClicked()
	{
		if (activeRacer == null)
		{
			return;
		}
		await SetRacer(activeRacer);
	}

	private void CreateUpdateTimer()
	{
		// Skapa en timer som tickar var 10:e millisekund (0.01 sekund).
		timer = new System.Timers.Timer(10);
		timer.Elapsed += OnTimerElapsed;
		timer.Start();
	}

	private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
	{
		currentTime = DateTime.Now;
		AddAllRacersToTimeList();

		// Uppdaterar UI:t på huvudtråden
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		timer?.Dispose();
	}

	private async Task SetTimeClick(DateTime dateTime)
	{
		if (activeRacer != null && activeRacer.Id != "")
		{
			activeRacer.LapDateTime.Add(dateTime);
			Console.WriteLine($"Added {dateTime} to activeRacer: {activeRacer.Bib}");
			timeList.Remove(activeRacer);
			timeList.Add(activeRacer);
			toasts?.CreateToast(new Toast("", $"{activeRacer.Name} {activeRacer.Surname} finished lap {activeRacer.LapDateTime.Count}!", ""));
			activeRacer = null;
			await raceService.UpdateRaceAsync(currentRace);
			await ScrollToBottomAsync();
			return;
		}

		Console.WriteLine($"Added {dateTime} to lapTimeList");
		var racer = new Racer();
		racer.LapDateTime.Add(dateTime);
		timeList.Add(racer);
		nextEdit.Add(racer);
		activeRacer = nextEdit[0];
		await ScrollToBottomAsync();
	}

	private async Task SetRacer(Racer getRacer)
	{
		if(activeRacer.Id != "")
		{
			activeRacer = null;
			return;
		}

		Console.WriteLine($"Trying to find {getRacer.Bib}");
		Racer? foundRacer = null;
		foreach (Startlist startlist in currentRace.Startlists)
		{
			foundRacer = startlist.Racers.Find(thisracer => thisracer.Bib == getRacer.Bib);
			if (foundRacer != null)
				break;
		}

		if (foundRacer == null)
		{
			Console.WriteLine($"Didn't find {getRacer.Bib}");
			toasts?.CreateToast(new Toast("", $"There is no racer with Bib: {getRacer.Bib}", "text-bg-danger"));
			getRacer.Bib = "";
			activeRacer = null;
			return;
		}

		Console.WriteLine($"Found {foundRacer.Bib} named {foundRacer.Name} {foundRacer.Surname}");
		foundRacer.LapDateTime.AddRange(getRacer.LapDateTime);
		int index = timeList.IndexOf(getRacer);
		timeList.Remove(foundRacer);
		timeList.Insert(index, foundRacer);
		timeList.Remove(getRacer);
		await raceService.UpdateRaceAsync(currentRace);

		toasts?.CreateToast(new Toast("", $"{foundRacer.Name} {foundRacer.Surname} finished lap {foundRacer.LapDateTime.Count}!", "text-bg-success"));

		if (nextEdit.Contains(getRacer))
		{
			nextEdit.Remove(getRacer);
		}
		activeRacer = null;
		if (nextEdit.Count > 0)
		{
			activeRacer = nextEdit[0];
		}
	}

	private async Task ScrollToBottomAsync()
	{
		await JS.InvokeVoidAsync("scrollToBottom", "timeListContainer");
	}
}