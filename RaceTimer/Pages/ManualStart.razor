@page "/race-view/{RaceId}/manual-start"
@inject NavigationManager NavManager
@inject IJSRuntime jsRuntime

@if (currentRace != null)
{
	<div class="page">
		<div class="box-body">
			<div class="top-row">
				<h1 class="top-row-title">@currentTime.ToString("HH:mm:ss.ff")</h1>
				<div class="top-row-buttons">
					<a class="btn btn-normal" href="@($"/race-view/{RaceId}")">
						<span>Back</span>
						<i class="bi btn-bi bi-chevron-double-left"></i>
					</a>
				</div>
			</div>
			<div class="top-row">
				<button class="btn btn-normal" @onclick="()=>StartMultipleStartlists()">
					<span>Start @startlistSelected.Count(s => s == true) startlists</span>
					<i class="bi btn-bi bi-play" />
				</button>
			</div>
		</div>
		<div class="box-body box-body-stretch">

			<div class="top-row">
				<h1 class="top-row-title">Select Startlists</h1>
			</div>
			<div class="all-cards">
				@foreach (Startlist startlist in currentRace.Startlists)
				{
					<div class="card">
						<div class="card-header">
							<span>@startlist.Name</span>
						</div>
						<div class="card-body">
							Contains @startlist.Racers.Count racers
						</div>
						<div class="card-footer">
							<input type="checkbox" class="btn-normal-check" id="selectInput-@startlist.Id" @bind="startlistSelected[currentRace.Startlists.IndexOf(startlist)]">
							<label class="btn btn-normal" for="selectInput-@startlist.Id">
								<span>Press to Select</span>
								<i class="bi btn-bi @((startlistSelected[currentRace.Startlists.IndexOf(startlist)])?"bi-check-circle":"bi-circle")" />
							</label>
						</div>
					</div>
				}
			</div>
		</div>
	</div>
}

@code {
	[Parameter] public string RaceId { get; set; }
	public Race currentRace;
	private List<bool> startlistSelected = new List<bool>();
		private System.Timers.Timer timer = new System.Timers.Timer();
	public DateTime currentTime = DateTime.Now;


	protected override async Task OnInitializedAsync()
	{
		currentRace = await RaceService.GetRaceByIdAsync(RaceId, jsRuntime);
		foreach (Startlist startlist in currentRace.Startlists)
		{
			startlistSelected.Add(false);
		}
		CreateUpdateTimer();

	}

		private void CreateUpdateTimer()
	{
		// Skapa en timer som tickar var 10:e millisekund (0.01 sekund).
		timer = new System.Timers.Timer(10);
		timer.Elapsed += OnTimerElapsed;
		timer.Start();
	}

	private void OnTimerElapsed(object sender, System.Timers.ElapsedEventArgs e)
	{
		currentTime = DateTime.Now;

		// Uppdaterar UI:t på huvudtråden
		InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		timer?.Dispose();
	}

	private async Task StartStartlist(Startlist startlist)
	{
		DateTime startDateTime = DateTime.Now;
		startlist.Racers.ForEach(racer => { racer.StartDateTime = startDateTime; });

		await RaceService.UpdateRaceAsync(currentRace, jsRuntime);
	}

	private async Task TryStartStartlist(bool selected, int index)
	{
		if (!selected) return;

		Startlist selectedStartlist = currentRace.Startlists[index];

		Console.WriteLine($"Starting startlist: {selectedStartlist.Name}, Index: {index}");


		await StartStartlist(selectedStartlist);
	}

	private async Task StartMultipleStartlists()
	{
		int startlistIndex = 0;
		foreach (bool selected in startlistSelected)
		{
			await TryStartStartlist(selected, startlistIndex);
			startlistIndex++;
		}

		NavManager.NavigateTo($"/race-view/{RaceId}");
	}
}
