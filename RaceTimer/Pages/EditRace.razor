@page "/races/edit/{RaceId}"
@using Classes
@using Pages
@inject RaceService raceService
@inject NavigationManager NavManager


<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModal" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h1 class="modal-title fs-5" id="deleteModal">Delete Startlist</h1>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				Are you sure you want to delete @modalStartlist.Name?
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-normal" data-bs-dismiss="modal" @onclick="()=>DeleteStartlist(modalStartlist)">
					<span>Delete</span>
					<i class="bi btn-bi bi-trash3"></i>
				</button>
				<button type="button" class="btn btn-normal" data-bs-dismiss="modal">
					<span>Cancel</span>
					<i class="bi btn-bi bi-x-lg"></i>
				</button>
			</div>
		</div>
	</div>
</div>

<div class="page">
	@if (currentRace != null)
	{
		<PageTitle>Edit @currentRace.Name</PageTitle>

		<div class="box-body">
			<div class="top-row">
				<h1 class="top-row-title">
					@if (currentRace.Name == "")
					{
						<span>Untitled Race</span>
					}
					else
					{
						<span>@currentRace.Name</span>
					}
				</h1>

				<div class="top-row-buttons">
					<a class="btn btn-normal" href="@($"/races")">
						<span>Back</span>
						<i class="bi btn-bi bi-chevron-double-left"></i>
					</a>
				</div>
			</div>
			<div>
				<label>Name:</label>
				<input type="text" @onchange="UpdateName" class="form-control race-input" value="@currentRace.Name" placeholder="Untitled Race" />
			</div>
		</div>
		<div class="box-body box-body-stretch">
			<div class="top-row">
				<h1 class="top-row-title">Startlists</h1>
				<div class="top-row-buttons">
					<button class="btn btn-normal" @onclick="()=>AddStartlist()">
						<span>Add</span>
						<i class="bi btn-bi bi-plus-lg"></i>
					</button>
				</div>
			</div>
			<div>
				@if (currentRace.Startlists != null)
				{
					@foreach (Startlist startlist in currentRace.Startlists)
					{
						<div class="card mb-3 @startlist.currentAnimation">
							<div class="card-header">
								<h5 class="card-title">@startlist.Name</h5>
							</div>
							<div class="card-body">
								<div class="card-text">
									<div>Type: Mass</div>
									<div>Start: xx:xx</div>
									<div>Total Racers: @startlist.Racers.Count</div>
								</div>
							</div>
							<div class="card-footer">
								<a href="@($"/races/edit/{currentRace.Id}/{startlist.Id}")" class="btn btn-normal">
									<span>Edit</span>
									<i class="bi btn-bi bi-pencil-square"></i>
								</a>
								<button type="button" class="btn btn-normal" data-bs-toggle="modal" data-bs-target="#deleteModal" @onclick="()=>modalStartlist = startlist">
									<span>Delete</span>
									<i class="bi btn-bi bi-trash3"></i>
								</button>
								<button class="btn btn-normal">
									<span>Duplicate</span>
									<i class="bi btn-bi bi-copy"></i>
								</button>
								<button class="btn btn-normal">
									<span>Export</span>
									<i class="bi btn-bi bi-box-arrow-up"></i>
								</button>

							</div>
						</div>
					}
				}
			</div>

		</div>

	}
</div>



@code {
	[Parameter] public string RaceId { get; set; }
	private Race currentRace;
	private Startlist modalStartlist = new Startlist();

	protected override async Task OnInitializedAsync()
	{
		currentRace = await raceService.GetRaceByIdAsync(RaceId);
	}

	private async Task UpdateName(ChangeEventArgs e)
	{
		currentRace.Name = e.Value.ToString();
		await SaveRace();
	}

	private async Task SaveRace()
	{
		currentRace.lastEditDateTime = DateTime.Now;
		await raceService.UpdateRaceAsync(currentRace);
	}

	private async Task AddStartlist()
	{
		Startlist addStartlist = new Startlist()
			{
				Name = "Untitled Startlist",
				Id = IdGenerator.GenerateBase64String(5),
				Racers = new List<Racer>()
			};

		while (currentRace.Startlists.Exists(startlist => startlist.Id == addStartlist.Id) || addStartlist.Id.Contains("/"))
		{
			addStartlist.Id = IdGenerator.GenerateBase64String(5);
		}

		currentRace.Startlists.Add(addStartlist);
		await SaveRace();

		NavManager.NavigateTo($"/races/edit/{currentRace.Id}/{addStartlist.Id}");

	}

	private async Task DeleteStartlist(Startlist deleteStartlist)
	{
		if (deleteStartlist == null)
			return;
		if (!currentRace.Startlists.Contains(deleteStartlist))
			return;

		deleteStartlist.currentAnimation = "fade-out";

		await Task.Delay(500);

		deleteStartlist.currentAnimation = "";

		currentRace.Startlists.Remove(deleteStartlist);
		await raceService.UpdateRaceAsync(currentRace);
	}

}
