@page "/races/edit/{RaceId}"
@inject NavigationManager NavManager
@inject IJSRuntime JS

<Toasts @ref="toasts" />

@if (currentRace != null)
{
	@if (modalStartlist != null)
	{
		<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModal" aria-hidden="true">
			<div class="modal-dialog modal-dialog-centered">
				<div class="modal-content">
					<div class="modal-header">
						<h1 class="modal-title fs-5" id="deleteModal">Delete Startlist</h1>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						Are you sure you want to delete @modalStartlist.Name?
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-normal" data-bs-dismiss="modal" @onclick="()=>DeleteStartlist(modalStartlist)">
							<span>Delete</span>
							<i class="bi btn-bi bi-trash3"></i>
						</button>
						<button type="button" class="btn btn-normal" data-bs-dismiss="modal">
							<span>Cancel</span>
							<i class="bi btn-bi bi-x-lg"></i>
						</button>
					</div>
				</div>
			</div>
		</div>
	}

	<div class="page">

		<PageTitle>Edit @currentRace.Name</PageTitle>

		<div class="box-body">
			<div class="top-row">
				<h1 class="top-row-title">
					@if (currentRace.Name == "")
					{
						<span>Untitled Race</span>
					}
					else
					{
						<span>@currentRace.Name</span>
					}
				</h1>

				<div class="top-row-buttons">
					<a class="btn btn-normal" href="@($"/races")">
						<span>Back</span>
						<i class="bi btn-bi bi-chevron-double-left"></i>
					</a>
				</div>
			</div>
			<div>
				<label>Name</label>
				<input type="text" @onchange="UpdateName" class="form-control race-input" value="@currentRace.Name" placeholder="Name" />
			</div>
		</div>
		<div class="box-body box-body-stretch">
			<div class="top-row">
				<h1 class="top-row-title">Startlists</h1>
				<div class="top-row-buttons">
					<div>
						<InputFile OnChange="ImportStartlist" accept=".xlsx" class="d-none" id="fileInput" />
						<label for="fileInput" class="btn btn-normal">
							<span>Import</span>
							<i class="bi btn-bi bi-box-arrow-in-down"></i>
						</label>
					</div>
					<button class="btn btn-normal" @onclick="()=>AddStartlist()">
						<span>Add</span>
						<i class="bi btn-bi bi-plus-lg"></i>
					</button>
				</div>
			</div>
			<div>
				@if (currentRace.Startlists != null)
				{
					@foreach (Startlist startlist in currentRace.Startlists)
					{
						<div class="card mb-3 @startlist.CurrentAnimation">
							<div class="card-header">
								<h5 class="card-title">@startlist.Name</h5>
							</div>
							<div class="card-body">
								<div class="card-text">
									<div>Type: Mass</div>
									<div>
										Start:
										@if (startlist.AllStartDateTime().Count > 1)
										{
											@foreach (var startTime in startlist.AllStartDateTime())
											{
												<div>@Startlist.StartDatetimeString(startTime)</div>
											}
										}
										else
										{
											<span>@Startlist.StartDatetimeString(startlist.FirstStartDateTime())</span>
										}

									</div>
									<div>Distance: @(startlist.DistanceMeters + "m")</div>
									<div>Total Racers: @startlist.Racers.Count</div>
								</div>
							</div>
							<div class="card-footer">
								<a href="@($"/races/edit/{currentRace.Id}/{startlist.Id}")" class="btn btn-normal">
									<span>Edit</span>
									<i class="bi btn-bi bi-pencil-square"></i>
								</a>
								<button type="button" class="btn btn-normal" data-bs-toggle="modal" data-bs-target="#deleteModal" @onclick="()=>modalStartlist = startlist">
									<span>Delete</span>
									<i class="bi btn-bi bi-trash3"></i>
								</button>
								<button class="btn btn-normal" @onclick="()=>DuplicateStartlist(startlist)">
									<span>Duplicate</span>
									<i class="bi btn-bi bi-copy"></i>
								</button>
								<button class="btn btn-normal" @onclick="()=>ExportAndDownloadStartlist(startlist)">
									<span>Export</span>
									<i class="bi btn-bi bi-box-arrow-up"></i>
								</button>

							</div>
						</div>
					}
				}
			</div>

		</div>

	</div>
}
else
{
	<div class="page-spinner spinner-border" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}



@code {
	[Parameter] public string? RaceId { get; set; }
	private Race? currentRace;
	private Startlist? modalStartlist = null;
	private Toasts toasts = new Toasts();


	protected override async Task OnInitializedAsync()
	{
		currentRace = await RaceService.GetRaceByIdAsync(RaceId, JS);
	}

	private async Task UpdateName(ChangeEventArgs e)
	{
		if (e.Value == null || currentRace == null)
		{
			return;
		}
		currentRace.Name = e.Value?.ToString() ?? string.Empty;
		await SaveRace();
	}

	private async Task SaveRace()
	{
		currentRace.lastEditDateTime = DateTime.Now;
		await RaceService.UpdateRaceAsync(currentRace, JS);
	}

	private async Task AddStartlist()
	{
		Startlist addStartlist = new Startlist("Untitled Startlist", currentRace.Startlists.Select(s => s.Id));

		currentRace.Startlists.Add(addStartlist);
		await SaveRace();

		NavManager.NavigateTo($"/races/edit/{currentRace.Id}/{addStartlist.Id}");

	}

	private async Task DeleteStartlist(Startlist deleteStartlist)
	{
		if (deleteStartlist == null)
			return;
		if (!currentRace.Startlists.Contains(deleteStartlist))
			return;

		deleteStartlist.CurrentAnimation = "fade-out";

		await Task.Delay(500);

		deleteStartlist.CurrentAnimation = "";

		currentRace.Startlists.Remove(deleteStartlist);
		await RaceService.UpdateRaceAsync(currentRace, JS);
	}

	private async Task ExportAndDownloadStartlist(Startlist startlist)
	{
		using var memoryStream = ExcelHandler.ExportStartlistToExcel(startlist);
		var fileName = $"{startlist.Name}.xlsx";
		var fileBytes = memoryStream.ToArray();
		await DownloadFile(fileBytes, fileName, "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");
	}

	private async Task DownloadFile(byte[] fileBytes, string fileName, string contentType)
	{
		var base64Data = Convert.ToBase64String(fileBytes);
		await JS.InvokeVoidAsync("downloadFileFromBlazor", fileName, contentType, base64Data);
	}

	private async Task ImportStartlist(InputFileChangeEventArgs e)
	{
		try
		{
			var file = e.File;
			var memoryStream = new MemoryStream();
			await file.OpenReadStream().CopyToAsync(memoryStream);
			memoryStream.Position = 0;
			var importedStartlist = ExcelHandler.ImportStartlistFromExcel(memoryStream, currentRace.Startlists, ExcelHandler.RemoveExcelFileExtension(file.Name));
			currentRace.Startlists.Add(importedStartlist);
			await SaveRace();
			await InvokeAsync(StateHasChanged);
			NavManager.NavigateTo($"/races/edit/{currentRace.Id}/{importedStartlist.Id}");
		}
		catch (Exception ex)
		{
			Console.WriteLine($"Error during file import: {ex.Message}");
			toasts?.CreateToast(new Toast("", $"Error during file import: {ex.Message}", "text-bg-danger"));
		}
	}

	private async Task DuplicateStartlist(Startlist startlist)
	{
		Console.WriteLine("Duplicating " + startlist.Name);
		Startlist duplicatedStartlist = startlist.DuplicateStartlist(currentRace.Startlists.Select(r => r.Id));
		currentRace.Startlists.Add(duplicatedStartlist);
		await SaveRace();

		NavManager.NavigateTo($"/races/edit/{currentRace.Id}/{duplicatedStartlist.Id}");

	}
}
