@page "/results/{RaceId}"
@inject RaceService raceService
@inject IJSRuntime jsRuntime

<Toasts @ref="toasts" />

<div class="page">
	@if (currentRace != null)
	{
		<div class="box-body">
			<div class="top-row">
				<h1 class="top-row-title">@currentRace.Name</h1>
				<div class="top-row-buttons">
					<a class="btn btn-normal" href="/race-view/@RaceId">
						<span>Back</span>
						<i class="bi btn-bi bi-chevron-double-left" />
					</a>
				</div>
			</div>
			<div>
				<h3>Result Data</h3>
				<div>
					@if (resultDataCheckboxes != null)
					{
						@foreach (CheckBox checkbox in resultDataCheckboxes)
						{
							<input type="checkbox" class="btn-normal-check" id="@($"{checkbox.Id}resultDataCheckbox")" @bind="@(resultDataCheckboxes[resultDataCheckboxes.IndexOf(checkbox)].Value)">
							<label class="btn btn-normal" for="@($"{checkbox.Id}resultDataCheckbox")">
								<span>@checkbox.Name</span>
								<i class="bi btn-bi @((checkbox.Value)?"bi-check-circle":"bi-circle")" />
							</label>
						}
					}
				</div>
			</div>
			<div>
				<h3>Racer Data</h3>
				<div>
					@if (racerResultDataCheckboxes != null)
					{
						@foreach (CheckBox checkbox in racerResultDataCheckboxes)
						{
							<input type="checkbox" class="btn-normal-check" id="@($"{checkbox.Id}racerResultDataCheckbox")" @bind="@(racerResultDataCheckboxes[racerResultDataCheckboxes.IndexOf(checkbox)].Value)">
							<label class="btn btn-normal" for="@($"{checkbox.Id}racerResultDataCheckbox")">
								<span>@checkbox.Name</span>
								<i class="bi btn-bi @((checkbox.Value)?"bi-check-circle":"bi-circle")" />
							</label>
						}
					}
				</div>
			</div>
			<div>
				<h3>Result Design</h3>
				<div>
					<select class="form-select">
						<option value="value">Default Design</option>
					</select>
				</div>
			</div>
		</div>

		<div class="box-body box-body-stretch">
			<div class="top-row">
				<h1 class="top-row-title">Results</h1>
			</div>
			<div class="all-cards">
				@if (currentRace.Startlists != null)
				{
					@foreach (Startlist startlist in currentRace.Startlists)
					{
						<div class="card mb-3 @startlist.currentAnimation">
							<div class="card-header">
								<h5 class="card-title">@startlist.Name</h5>
							</div>
							<div class="card-body">
								<div class="card-text">
									<div>Total Racers: @startlist.Racers.Count</div>
								</div>
							</div>
							<div class="card-footer">
								<a href="@($"/results/{@currentRace.Id}/{startlist.Id}")" class="btn btn-normal">
									<span>Export Results</span>
									<i class="bi btn-bi bi-box-arrow-up"></i>
								</a>
							</div>
						</div>
					}
				}
			</div>
		</div>
	}
</div>


@code {
	[Parameter] public string? RaceId { get; set; }
	public Race currentRace = new Race();
	public List<CheckBox>? resultDataCheckboxes;
	public List<CheckBox>? racerResultDataCheckboxes;

	private Toasts toasts = new Toasts();

	protected override async Task OnInitializedAsync()
	{
		if (RaceId == null)
			return;

		resultDataCheckboxes = new List<CheckBox>
	{
		new CheckBox("resultbib", "Bib", jsRuntime),
		new CheckBox("resulttime", "Time", jsRuntime),
		new CheckBox("resulttimestamp", "Timestamp", jsRuntime),
		new CheckBox("resultpace", "Pace (min/km)", jsRuntime),
		new CheckBox("resultspeed", "Speed (km/h)", jsRuntime),
		new CheckBox("resultlaptimes", "Laptimes", jsRuntime)
	};

		racerResultDataCheckboxes = new List<CheckBox>
	{
		new CheckBox("racerbib", "Bib", jsRuntime),
		new CheckBox("racertime", "Time", jsRuntime),
		new CheckBox("racertimestamp", "Timestamp", jsRuntime),
		new CheckBox("racerpace", "Pace (min/km)", jsRuntime),
		new CheckBox("racerspeed", "Speed (km/h)", jsRuntime),
		new CheckBox("racerlaptimes", "Laptimes", jsRuntime),
	};

		var getRace = await raceService.GetRaceByIdAsync(RaceId);

		if (getRace == null)
			return;

		currentRace = getRace;
		AddCustomFieldsToCheckboxes(GetCustomFieldNames());

		// Debugging log
		Console.WriteLine($"racerResultDataCheckboxes count: {racerResultDataCheckboxes.Count}");

		await GetCheckboxValues();

		await InvokeAsync(StateHasChanged);
		StateHasChanged();
	}

	void AddCustomFieldsToCheckboxes(List<string> customFieldNames)
	{
		if (racerResultDataCheckboxes != null)
		{
			@foreach (string customFieldName in customFieldNames)
			{
				racerResultDataCheckboxes.Add
				(
				new CheckBox($"customField-{customFieldNames.IndexOf(customFieldName)}", customFieldName, jsRuntime)
				);
			}
		}
	}

	List<string> GetCustomFieldNames()
	{
		IEnumerable<Classes.Racer.CustomField> allCustomFields = currentRace.Startlists.SelectMany(s => s.Racers).SelectMany(r => r.CustomFields);

		List<string> allCustomFieldNames = new List<string>();

		foreach (Classes.Racer.CustomField customField in allCustomFields)
		{
			if (allCustomFieldNames.Contains(customField.Name))
			{
				continue;
			}

			allCustomFieldNames.Add(customField.Name);
		}
		return allCustomFieldNames;
	}

	async Task GetCheckboxValues()
	{
		if (resultDataCheckboxes != null)
		{
			foreach (CheckBox checkbox in resultDataCheckboxes)
			{
				await checkbox.LoadCheckboxValue();
			}
		}

		if (racerResultDataCheckboxes != null)
		{
			foreach (CheckBox checkbox in racerResultDataCheckboxes)
			{
				await checkbox.LoadCheckboxValue();
			}
		}

	}

    public class CheckBox
    {
        private readonly IJSRuntime jsRuntime;
        private bool value;

        public CheckBox(string id, string name, IJSRuntime jSRuntime)
        {
            this.Id = id;
            this.Name = name;
            this.value = false;
            this.jsRuntime = jSRuntime;
        }

        public async Task SaveCheckboxValue()
        {
            SaveLoadService saveLoadService = new SaveLoadService(jsRuntime);
            await saveLoadService.SaveAsync($"{Id}checkboxValue", Value);
        }

        public async Task LoadCheckboxValue()
        {
            SaveLoadService saveLoadService = new SaveLoadService(jsRuntime);
            var getValue = await saveLoadService.LoadAsync<bool>($"{Id}checkboxValue");
            Value = getValue;
        }

        public string Id { get; set; }
        public string Name { get; set; }
        public bool Value
        {
            get => value;
            set
            {
                this.value = value;
                SaveCheckboxValue().ConfigureAwait(false);
            }
        }
    }
}
