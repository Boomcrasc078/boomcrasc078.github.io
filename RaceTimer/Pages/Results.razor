@page "/results/{RaceId}"
@inject RaceService raceService
@inject SaveLoadService saveLoadService
@inject IJSRuntime jsRuntime

<Toasts @ref="toasts" />

<div class="page">
	@if (currentRace != null)
	{
		<div class="box-body">
			<div class="top-row">
				<h1 class="top-row-title">@currentRace.Name</h1>
				<div class="top-row-buttons">
					<a class="btn btn-normal" href="/race-view/@RaceId">
						<span>Back</span>
						<i class="bi btn-bi bi-chevron-double-left" />
					</a>
				</div>
			</div>
			<div>
				<h3>Result Data</h3>
				<div>
					@if (resultData != null && checkboxValuesInitialized)
					{
						@foreach (ResultData checkbox in resultData)
						{
							<input type="checkbox" class="btn-normal-check" checked="@checkbox.Value" id="@($"{checkbox.Id}resultDataCheckbox")" @onchange="(ChangeEventArgs eventArgs)=>SetAndSaveCheckboxValues(eventArgs, checkbox)">
							<label class="btn btn-normal" for="@($"{checkbox.Id}resultDataCheckbox")">
								<span>@checkbox.Name</span>
								<i class="bi btn-bi @((checkbox.Value)?"bi-check-circle":"bi-circle")" />
							</label>
						}
					}
					else
					{
						<div class="spinner-border" role="status">
							<span class="visually-hidden">Loading...</span>
						</div>
					}
				</div>
			</div>
			<div>
				<h3>Racer Data</h3>
				<div>
					@if (racerResultData != null && checkboxValuesInitialized)
					{
						@foreach (ResultData checkbox in racerResultData)
						{
							<input type="checkbox" class="btn-normal-check" checked="@checkbox.Value" id="@($"{checkbox.Id}racerResultDataCheckbox")" @onchange="(ChangeEventArgs eventArgs)=>SetAndSaveCheckboxValues(eventArgs, checkbox)">
							<label class="btn btn-normal" for="@($"{checkbox.Id}racerResultDataCheckbox")">
								<span>@checkbox.Name</span>
								<i class="bi btn-bi @((checkbox.Value)?"bi-check-circle":"bi-circle")" />
							</label>
						}
					}
					else
					{
						<div class="spinner-border" role="status" style="display: flex; justify-content: center;">
							<span class="visually-hidden">Loading...</span>
						</div>
					}
				</div>
			</div>
			<div>
				<h3>Result Design</h3>
				<div>
					<select class="form-select">
						<option value="value">Default Design</option>
					</select>
				</div>
			</div>
		</div>

		<div class="box-body box-body-stretch">
			<div class="top-row">
				<h1 class="top-row-title">Results</h1>
			</div>
			<div class="all-cards">
				@if (currentRace.Startlists != null)
				{
					@foreach (Startlist startlist in currentRace.Startlists)
					{
						<div class="card mb-3 @startlist.currentAnimation">
							<div class="card-header">
								<h5 class="card-title">@startlist.Name</h5>
							</div>
							<div class="card-body">
								<div class="card-text">
									<div>Total Racers: @startlist.Racers.Count</div>
								</div>
							</div>
							<div class="card-footer">
								<a href="@($"/results/{@currentRace.Id}/{startlist.Id}")" class="btn btn-normal">
									<span>Export Results</span>
									<i class="bi btn-bi bi-box-arrow-up"></i>
								</a>
							</div>
						</div>
					}
				}
			</div>
		</div>
	}
</div>

@code {
	[Parameter] public string? RaceId { get; set; }
	public Race currentRace = new Race();
	public List<ResultData>? resultData;
	public List<ResultData>? racerResultData;
	private bool checkboxValuesInitialized = false;

	private Toasts toasts = new Toasts();

	protected override async Task OnInitializedAsync()
	{
		if (RaceId == null)
			return;

		resultData = new List<ResultData>
		{
			new ResultData("bib", "Bib"),
			new ResultData("time", "Time"),
			new ResultData("timestamp", "Timestamp"),
			new ResultData("pace", "Pace (min/km)"),
			new ResultData("speed", "Speed (km/h)"),
			new ResultData("laptimes", "Laptimes")
		};

		racerResultData = new List<ResultData>
		{
			new ResultData("bib", "Bib"),
			new ResultData("time", "Time"),
			new ResultData("timestamp", "Timestamp"),
			new ResultData("pace", "Pace (min/km)"),
			new ResultData("speed", "Speed (km/h)"),
			new ResultData("laptimes", "Laptimes"),
		};

		var getRace = await raceService.GetRaceByIdAsync(RaceId);

		if (getRace == null)
			return;

		currentRace = getRace;

		AddCustomFieldsToCheckboxes(GetCustomFieldNames());

		await GetCheckboxValues();

		await SaveCheckboxValues();

		await InvokeAsync(StateHasChanged);

		checkboxValuesInitialized = true;
	}

	void AddCustomFieldsToCheckboxes(List<string> customFieldNames)
	{
		if (racerResultData != null)
		{
			foreach (string customFieldName in customFieldNames)
			{
				racerResultData.Add
				(
					new ResultData($"customField-{customFieldNames.IndexOf(customFieldName)}", customFieldName)
				);
			}
		}
	}

	List<string> GetCustomFieldNames()
	{
		IEnumerable<Classes.Racer.CustomField> allCustomFields = currentRace.Startlists.SelectMany(s => s.Racers).SelectMany(r => r.CustomFields);
		List<string> allCustomFieldNames = new List<string>();

		foreach (Classes.Racer.CustomField customField in allCustomFields)
		{
			if (allCustomFieldNames.Contains(customField.Name))
			{
				continue;
			}

			allCustomFieldNames.Add(customField.Name);
		}
		return allCustomFieldNames;
	}

	async Task GetCheckboxValues()
	{
		List<ResultData>? getResultDataCheckboxes = await saveLoadService.LoadAsync<List<ResultData>>("resultData");
		List<ResultData>? getRacerResultDataCheckboxes = await saveLoadService.LoadAsync<List<ResultData>>("racerResultData");

		if (getResultDataCheckboxes != null && resultData != null)
		{
			foreach (ResultData checkbox in resultData)
			{
				ResultData? getCheckBox = getResultDataCheckboxes.FirstOrDefault(x => x.Id == checkbox.Id);
				if (getCheckBox == null)
				{
					continue;
				}

				checkbox.Value = getCheckBox.Value;
			}
		}

		if (getRacerResultDataCheckboxes != null && racerResultData != null)
		{
			foreach (ResultData checkbox in racerResultData)
			{
				ResultData? getCheckBox = getRacerResultDataCheckboxes.FirstOrDefault(x => x.Id == checkbox.Id);
				if (getCheckBox == null)
				{
					continue;
				}

				checkbox.Value = getCheckBox.Value;
			}
		}
	}

	async Task SetAndSaveCheckboxValues(ChangeEventArgs eventArgs, ResultData checkbox)
	{
		object? getValue = eventArgs.Value;

		if (getValue == null)
		{
			await SaveCheckboxValues();
			return;
		}

		bool unboxedValue = (bool)getValue;

		checkbox.Value = unboxedValue;

		await SaveCheckboxValues();
	}

	async Task SaveCheckboxValues()
	{
		if (resultData != null)
		{
			await saveLoadService.SaveAsync<List<ResultData>>("resultData", resultData);
		}
		if (racerResultData != null)
		{
			await saveLoadService.SaveAsync<List<ResultData>>("racerResultData", racerResultData);
		}
	}

	public class ResultData
	{

		public ResultData(string id, string name)
		{
			this.Id = id;
			this.Name = name;
			this.Value = false;
		}

		public string Id { get; set; }
		public string Name { get; set; }
		public bool Value { get; set; }
	}
}
}
