@page "/race-view/{RaceId}/{RacerId}"

<Toasts @ref="toasts"></Toasts>

@if (currentRacer != null)
{
	<div class="content-box-section">
		<div class="content-box">
			<h1>@currentRacer.Name @currentRacer.Surname</h1>

			<div>
				<label>Name:</label>
				<input type="text" value="@currentRacer.Name" class="form-control" placeholder="John" />
			</div>
			<div>
				<label>Surname:</label>
				<input type="text" value="@currentRacer.Surname" class="form-control" placeholder="Johnson" />
			</div>
			<div>
				<label>Bib:</label>
				<input type="number" value="@currentRacer.Bib" class="form-control" placeholder="123" />
			</div>
		</div>



	</div>
}
else
{
	<div class="page-spinner spinner-border" role="status">
		<span class="visually-hidden">Loading...</span>
	</div>
}

@code {
	[Parameter] public string RaceId { get; set; }
	[Parameter] public string RacerId { get; set; }
	private Toasts toasts = new Toasts();
	private Race currentRace { get; set; } = new Race();
	private Racer currentRacer { get; set; } = new Racer();

	protected override async Task OnInitializedAsync()
	{
		await LoadRace();
		await LoadRacer();
	}

	async Task LoadRace()
	{
		var getRace = await RaceService.GetRaceByIdAsync(RaceId, jsRuntime);

		if (getRace == null)
		{
			toasts?.CreateToast(new Toast("", $"Could not find a race with id: {RaceId}", "text-bg-danger"));
		}

		currentRace = getRace;
	}

	async Task LoadRacer()
	{
		var getRacer = currentRace.Startlists.SelectMany(startlist => startlist.Racers).First(racer => racer.Id == RacerId);

		if (getRacer == null)
		{
			toasts?.CreateToast(new Toast("", $"Could not find a racer with id: {RacerId}", "text-bg-danger"));
		}

		currentRacer = getRacer;
	}
}