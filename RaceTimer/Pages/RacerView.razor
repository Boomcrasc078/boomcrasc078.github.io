@page "/race-view/{RaceId}/{RacerId}"

<Toasts @ref="toasts"></Toasts>

@if (currentRacer != null)
{
    <div class="content-box-section">
        <div class="content-box">
            <div class="d-flex justify-content-between flex-wrap">
                @if (currentRacer.Name != "" || currentRacer.Surname != "")
                {
                    <h1 class="top-row-title">@currentRacer.Name @currentRacer.Surname</h1>
                }
                else
                {
                    <h1 class="top-row-title">Unnamed Racer</h1>
                }
                <div class="top-row-buttons">
                </div>
            </div>
            <div>
                <div>Name: @currentRacer.Name</div>
                <div>Surname: @currentRacer.Surname</div>
                <div>Startlist: @(currentRace.Startlists.Find(startlist => startlist.Racers.Contains(currentRacer))?.Name)</div>
                <div>Distance: @(currentRace.Startlists.Find(startlist => startlist.Racers.Contains(currentRacer))?.DistanceMeters)m</div>
                @foreach (var customField in currentRacer.CustomFields)
                {
                    switch (customField.Name)
                    {
                        case "Phone":
                            <div>@(customField.Name): <a href="tel: @customField.Data">@customField.Data</a></div>
                            break;

                        case "E-Mail":
                            <div>@(customField.Name): <a href="mailto: @customField.Data">@customField.Data</a></div>
                            break;

                        default:
                            <div>@(customField.Name): @customField.Data</div>
                            break;
                    }
                }
            </div>
        </div>

        <div class="content-box">
            <div class="d-flex justify-content-between flex-wrap">
                <h2 class="top-row-title">Events</h2>
                <div class="top-row-buttons">
                </div>
            </div>
            <div>
                <div>Start: @currentRacer.StartDateTime</div>
                @foreach (var lap in currentRacer.Events.Select((lap, index) => new { lap, index }))
                {
                    <div>@($"Lap {lap.index + 1}: {currentRacer.Events[lap.index].DateTime}")</div>
                }
            </div>
        </div>

    </div>
}

else
{
    <div class="page-spinner spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}

@code {
    [Parameter] public string RaceId { get; set; }
    [Parameter] public string RacerId { get; set; }
    private Toasts toasts = new Toasts();
    private Race currentRace { get; set; } = new Race();
    private Racer currentRacer { get; set; } = new Racer();

    protected override async Task OnInitializedAsync()
    {
        await LoadRace();
        LoadRacer();
    }

    async Task LoadRace()
    {
        var getRace = await RaceService.GetRaceByIdAsync(RaceId, jsRuntime);

        if (getRace == null)
        {
            toasts?.CreateToast(new Toast("", $"Could not find a race with id: {RaceId}", "text-bg-danger"));
        }

        currentRace = getRace;
    }

    void LoadRacer()
    {
        var getRacer = currentRace.Startlists.SelectMany(startlist => startlist.Racers).First(racer => racer.Id == RacerId);

        if (getRacer == null)
        {
            toasts?.CreateToast(new Toast("", $"Could not find a racer with id: {RacerId}", "text-bg-danger"));
        }

        currentRacer = getRacer;
    }
}